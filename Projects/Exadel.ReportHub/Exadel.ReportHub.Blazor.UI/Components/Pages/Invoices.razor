@page "/invoices"
@rendermode InteractiveServer

@inject IClientsService ClientsService
@inject IInvoicesService InvoiceService
@inject IUserStateService UserStateService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Nav

<div class="container-fluid mt-4">
	<div class="d-flex justify-content-between align-items-center mb-3">
		<h2 class="mb-0">Invoices</h2>
		<div class="d-flex">
			<select class="form-select me-2" style="width:200px"
					@bind="_selectedClientId">
				<option value="">-- Select client --</option>
				@foreach (var c in _clients)
				{
					<option value="@c.ClientId">@c.ClientName</option>
				}
			</select>
			<button class="btn btn-outline-primary me-2"
					@onclick="LoadInvoicesAsync"
					disabled="@(_selectedClientId == Guid.Empty || !_canRead)">
				Apply
			</button>
			@if (_canCreate)
			{
				<button class="btn btn-success"
						@onclick="CreateInvoice">
					+ New Invoice
				</button>
			}
		</div>
	</div>

	@if (_isLoading)
	{
		<div class="text-center py-5">
			<div class="spinner-border" role="status"></div>
		</div>
	}
	else if (_invoices?.Count > 0)
	{
		<div class="card shadow-sm">
			<div class="card-body p-0">
				<table class="table table-hover mb-0">
					<thead class="table-light">
						<tr>
							<th>Number</th>
							<th>Issue</th>
							<th>Due</th>
							<th class="text-end">Amount</th>
							<th>Currency</th>
							<th>Status</th>
							@if (_canUpdate || _canDelete)
							{
								<th class="text-center">Actions</th>
							}
						</tr>
					</thead>
					<tbody>
						@foreach (var inv in _invoices)
						{
							<tr>
								<td>@inv.InvoiceNumber</td>
								<td>@inv.IssueDate.ToShortDateString()</td>
								<td>@inv.DueDate.ToShortDateString()</td>
								<td class="text-end">@inv.ClientCurrencyAmount.ToString()</td>
								<td>@inv.ClientCurrencyCode</td>
								<td>@inv.PaymentStatus</td>
								@if (_canUpdate || _canDelete)
								{
									<td class="text-center">
										@if (_canUpdate)
										{
											<button class="btn btn-sm btn-outline-primary me-1"
													@onclick="() => EditInvoice(inv.Id)">
												Edit
											</button>
										}
										@if (_canDelete)
										{
											<button class="btn btn-sm btn-outline-danger"
													@onclick="() => DeleteInvoiceAsync(inv.Id)">
												Delete
											</button>
										}
									</td>
								}
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	}
	else if (_selectedClientId != Guid.Empty && _canRead)
	{
		<div class="alert alert-info mt-3">
			No invoices for this client.
		</div>
	}
	else if (!_canRead && _selectedClientId != Guid.Empty)
	{
		<div class="alert alert-warning mt-3">
			You do not have permission to view invoices.
		</div>
	}
</div>

@code {
	private IList<UserClientDTO> _clients = new List<UserClientDTO>();
	private IList<InvoiceDTO> _invoices = new List<InvoiceDTO>();
	private Guid _selectedClientId;
	private bool _isLoading;

	private UserRole CurrentRole =>
			UserStateService.GetSelectedClient()?.Role ?? UserRole.Operator;

	// все роли могут читать
	private bool _canRead => true;
	private bool _canCreate => CurrentRole is UserRole.ClientAdmin
								or UserRole.Owner
								or UserRole.SuperAdmin;
	private bool _canUpdate => _canCreate;
	private bool _canDelete => CurrentRole is UserRole.Owner
								or UserRole.SuperAdmin;

	protected override async Task OnInitializedAsync()
	{
		var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		if (auth.User.Identity?.IsAuthenticated != true)
			return;

		var cache = UserStateService.GetUserClientDTOs();
		if (cache == null || cache.Count == 0)
		{
			_clients = await ClientsService.GetClientsAsync();
			UserStateService.SetUserClients(_clients);
		}
		else
		{
			_clients = cache;
		}

		_selectedClientId = UserStateService.GetSelectedClientId();
		if (_selectedClientId != Guid.Empty)
		{
			await LoadInvoicesAsync();
		}
	}

	private async Task LoadInvoicesAsync()
	{
		if (!_canRead) return;

		_isLoading = true;
		StateHasChanged();

		UserStateService.SetClient(_selectedClientId);
		_invoices = await InvoiceService.GetInvoicesByClientIdAsync(_selectedClientId);

		_isLoading = false;
		StateHasChanged();
	}

	private void CreateInvoice()
	{
		Nav.NavigateTo($"/invoices/create/{_selectedClientId}");
	}

	private void EditInvoice(Guid id)
	{
		Nav.NavigateTo($"/invoices/edit/{id}");
	}

	private async Task DeleteInvoiceAsync(Guid id)
	{
		if (!_canDelete) return;
		await InvoiceService.DeleteInvoiceAsync(id, _selectedClientId);
		await LoadInvoicesAsync();
	}
}