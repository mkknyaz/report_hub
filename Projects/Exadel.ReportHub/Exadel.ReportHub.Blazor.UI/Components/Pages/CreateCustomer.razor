@page "/customers/create/{ClientId:guid}"
@rendermode InteractiveServer

@inject ICustomersService CustomerService
@inject ICountryService CountryService
@inject IUserStateService UserStateService
@inject NavigationManager Nav

<div class="container-fluid mt-4">
	<h3>Create Customer</h3>

	@if (!_canCreate)
	{
		<div class="alert alert-warning">
			You do not have permission to create customers.
		</div>
	}
	else
	{
		<EditForm Model="model" OnValidSubmit="HandleValidSubmit">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="mb-3">
				<label class="form-label">Name</label>
				<InputText class="form-control" @bind-Value="model.Name" />
			</div>

			<div class="mb-3">
				<label class="form-label">Email</label>
				<InputText class="form-control" @bind-Value="model.Email" />
			</div>

			<div class="mb-3">
				<label class="form-label">Country</label>
				<InputSelect TValue="Guid"
							 class="form-select"
							 @bind-Value="model.CountryId">
					<option value="">-- Select country --</option>
					@foreach (var c in _countries)
					{
						<option value="@c.Id">@c.Name</option>
					}
				</InputSelect>
			</div>

			<button type="submit" class="btn btn-primary">Create</button>
			<button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">
				Cancel
			</button>
		</EditForm>
	}
</div>

@code {
	[Parameter] public Guid ClientId { get; set; }
	private CreateCustomerDTO model = new();
	private IList<CountryDTO> _countries = Array.Empty<CountryDTO>();

	private UserRole CurrentRole =>
			UserStateService.GetSelectedClient()?.Role ?? UserRole.Operator;
	private bool _canCreate => CurrentRole is
			UserRole.ClientAdmin or UserRole.Owner or UserRole.SuperAdmin;

	protected override async Task OnInitializedAsync()
	{
		model.ClientId = ClientId;
		_countries = await CountryService.GetCountriesAsync();
	}

	private async Task HandleValidSubmit()
	{
		if (!_canCreate) return;
		await CustomerService.CreateCustomerAsync(model);
		Nav.NavigateTo("/customers");
	}

	private void Cancel() => Nav.NavigateTo("/customers");
}