@page "/invoices/edit/{InvoiceId:guid}"
@rendermode InteractiveServer

@inject IInvoicesService InvoiceService
@inject IUserStateService UserStateService
@inject ICountryService CountryService
@inject ICustomersService CustomerService
@inject IItemsService ItemsService
@inject NavigationManager Nav

<PageTitle>Edit Invoice</PageTitle>
<h3>Edit Invoice</h3>

@if (!_canUpdate)
{
    <div class="alert alert-warning">
        You do not have permission to edit invoices.
    </div>
}
else if (orig == null)
{
    <div class="text-center py-5"><div class="spinner-border" role="status"></div></div>
}
else
{
    <EditForm Model="model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Invoice Number</label>
            <InputText class="form-control"
                       @bind-Value="orig.InvoiceNumber"
                       disabled="disabled" />
        </div>

        <div class="row mb-3">
            <div class="col">
                <label class="form-label">Issue Date</label>
                <InputDate class="form-control"
                           @bind-Value="model.IssueDate" />
            </div>
            <div class="col">
                <label class="form-label">Due Date</label>
                <InputDate class="form-control"
                           @bind-Value="model.DueDate" />
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label">Items</label>
            <ul class="list-group">
                @foreach (var id in orig.ItemIds)
                {
                    var it = _items.FirstOrDefault(x => x.Id == id);
                    <li class="list-group-item">@it?.Name (@it?.Price.ToString())</li>
                }
            </ul>
        </div>

        <div class="d-flex">
            <button type="submit"
                    class="btn btn-primary"
                    disabled="@(!_canUpdate)">
                Save
            </button>
            <button type="button"
                    class="btn btn-secondary ms-2"
                    @onclick="Cancel">
                Cancel
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter] public Guid InvoiceId { get; set; }

    private InvoiceDTO orig;
    private UpdateInvoiceDTO model;
    private IList<ItemDTO> _items;

    private UserRole CurrentRole
        => UserStateService.GetSelectedClient()?.Role ?? UserRole.Operator;
    private bool _canUpdate
        => CurrentRole is UserRole.Owner or UserRole.ClientAdmin or UserRole.SuperAdmin;

    protected override async Task OnInitializedAsync()
    {
        orig = await InvoiceService.GetInvoiceByIdAsync(
            InvoiceId, UserStateService.GetSelectedClientId());

        model = new UpdateInvoiceDTO
            {
                IssueDate = orig.IssueDate,
                DueDate = orig.DueDate
            };

        _items = await ItemsService.GetItemsByClientIdAsync(orig.ClientId);
    }

    private async Task HandleValidSubmit()
    {
        if (!_canUpdate) return;

        await InvoiceService
            .UpdateInvoiceAsync(InvoiceId, model, orig.ClientId);

        Nav.NavigateTo("/invoices");
    }

    private void Cancel()
        => Nav.NavigateTo("/invoices");
}